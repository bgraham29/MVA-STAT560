food$Group <- substr(food$Group, 1, 2)
food
dim(food)
R <- cor(food[, -c(1, 9)])
round(R, 2)
library(corrplot)
corrplot.mixed(round(R, 2), upper = "number", lower = "circle")
H <- scale(food)
H <- scale(food[, 2:8])
h
H
str(H)
H <- as.data.frame(scale(food[, 2:8]))
H
cor(H)
Xstar <- 1/sqrt(12) * as.data.frame(scale(food[, 2:8]))
Xstar
t(Xstar) %*% Xstar
Xstar <- as.matrix(1/sqrt(12) * as.data.frame(scale(food[, 2:8])))
t(Xstar) %*% Xstar
H
t(H) %*% (H)
t(as.matrix(H)) %*% (as.matrix(H))
name(food)
names(food)
Hnew <- food[, 2:8]
for(i in 1:ncol(Hnew) {
    means <- apply(Hnew, 1, mean)
    Hnew[, i] <- Hnew[, i] - mean[i]
}
Hnew <- food[, 2:8]
for(i in 1:ncol(Hnew)) {
    means <- apply(Hnew, 1, mean)
    Hnew[, i] <- Hnew[, i] - mean[i]
}
Hnew <- food[, 2:8]
for(i in 1:ncol(Hnew)) {
    means <- apply(Hnew, 1, mean)
    Hnew[, i] <- Hnew[, i] - means[i]
}
Hnew
apply(Hnew, 2, sum)
means
ncol(Hnew)
means <- apply(Hnew, Hnew <- food[, 2:8]
for(i in 1:ncol(Hnew)) {
    means <- apply(Hnew, 2, mean)
    Hnew[, i] <- Hnew[, i] - means[i]
}
Hnew <- food[, 2:8]
for(i in 1:ncol(Hnew)) {
    means <- apply(Hnew, 2, mean)
    Hnew[, i] <- Hnew[, i] - means[i]
}
Hnew
apply(Hnew, 2, sum)
round(apply(Hnew, 2, sum), 4)
D <- diag(cov(Hnew))
cov(Hstar)
cov(Hnew)
cov(food[, 2:8])
dim(Hnew)
cor(Hnew)
Xstar2 <- 1/sqrt(12) * as.matrix(Hnew) %*% D %^% (-1/2)
D
D <- diag(cov(Hnew))
D
diag(1, 2)
D <- diag(cov(Hnew), length(Hnew))
diag(1)
D <- diag(c(cov(Hnew)))
D
cov(Hnew)
cov(Hnew)
diag(cov(Hnew))
D <- diag(D)
D
D <- diag(cov(Hnew))
D <- diag(D)
D
Xstar2 <- 1/sqrt(12) * as.matrix(Hnew) %*% D %^% (-1/2)
dim(D)
dim(Hnew)
Xstar2 <- 1/sqrt(12) * as.matrix(Hnew) %*% (D %^% (-1/2))
Xstar2
R
Xstar2 <- as.matrix(Hnew) %*% (D %^% (-1/2))
Xstar2
Hnew
Hscaled <- Hnew
for(i in 1:ncol(Hscaled)) {
   sd <- apply(Hscaled, 2, sd)
   Hscaled[, i] <- Hscaled[, i] / sd[i]
}
Xstar2 <- as.matrix(Hnew) %*% (D %^% (-1/2))
Hscaled
Xstar2
Xstar2 <- Xstar2 / 12
Xstar2 <- as.matrix(Hnew) %*% (D %^% (-1/2))
Xstar2 <- Xstar2 / sqrt(12)
Xstar2
t(Xstar2) %*% Xstar2
R
eigen(t(Xstar2) %*% Xstar2)
Xstar
Xstar2
cor(food[, 2:8])
Xstar
Xstar2
Xstar2 <- Xstar2 / sqrt(12)
Xstar2
Xstar2 <- as.matrix(Hnew) %*% (D %^% (-1/2))
Xstar2 <- Xstar2 / sqrt(12)
Xstar2
eigen(Xstar2)
eigen(cor(Xstar2))
eigen(R)
lambda <- eigen(Xstar2)$values
lambda <- eigen(t(Xstar2) %*% Xstar2)$values
lambda
Xstar2
lambda <- eigen(R)$values  # book values
lambda
tau2 <- sum(lambda[1:2]) / sum(lambda)
tau2
u <- eigen(R)$vectors
plot(sqrt(lambda[1]) * u[, 1], sqrt(lambda[2]) * u[, 2])
plot(sqrt(lambda[1]) * u[, 1], sqrt(lambda[2]) * u[, 2])
plot(w1, w2)
w1 <- sqrt(lambda[1]) * u[, 1]
w2 <- sqrt(lambda[2]) * u[, 2]
plot(w1, w2)
text(w1, w2, labels = colnames(food[, 2:8]))
w1 <- sqrt(lambda[1]) * -u[, 1]
w2 <- sqrt(lambda[2]) * -u[, 2]
plot(w1, w2)
text(w1, w2, labels = colnames(food[, 2:8]))
cbind(w1, w2)
w1 <- sqrt(lambda[1]) * u[, 1]
cbind(w1, w2)
w1 %*% w2
plot(w1, w2)
text(w1, w2, labels = colnames(food[, 2:8]))
plot(w1, w2, xlim = c(-1.1, 0.6), ylim = c(-1, 0.5))
text(w1, w2, labels = colnames(food[, 2:8]))
plot(w1, w2, xlim = c(-1.5, 0.6), ylim = c(-1, 0.4))
text(w1, w2, labels = colnames(food[, 2:8]))
plot(w1, w2, xlim = c(-1.5, 0.6), ylim = c(-1, 0.3))
text(w1, w2, labels = colnames(food[, 2:8]))
plot(w1, w2, xlim = c(-1.5, 0.6), ylim = c(-1, 0.4))
text(w1, w2, labels = colnames(food[, 2:8]))
plot(w1, w2, xlim = c(-1.05, 0.6), ylim = c(-1, 0.4))
text(w1, w2, labels = colnames(food[, 2:8]))
abline(h = 0); abline(v = 0)
plot(w1, w2, xlim = c(-1.05, 0.6), ylim = c(-1, 0.4), col = "white")
text(w1, w2, labels = colnames(food[, 2:8]))
abline(h = 0); abline(v = 0)
plot(w1, w2, xlim = c(-1.05, 0.6), ylim = c(-1, 0.4), col = "white",
  main = "Representation of variables in 2-dimensional space")
text(w1, w2, labels = colnames(food[, 2:8]))
abline(h = 0); abline(v = 0)
V <- as.matrix(food[, 2:8]) %*% t(as.matrix(food[, 2:8]))
v <- eigen(V)$vectors
v
eigen(V)$values
v <- eigen(cor(V))$vectors
eigen(cor(V))$values
eigen(V)$values
eigen(t(as.matrix(food[, 2:8]) %*% as.matrix(food[, 2:8]))$values
eigen(t(as.matrix(food[, 2:8])) %*% as.matrix(food[, 2:8]))$values
eigen(as.matrix(food[, 2:8]) %*% t(as.matrix(food[, 2:8])))$values
z1 <- sqrt(lambda[1]) * v[, 1]
z1 <- sqrt(lambda[2]) * v[, 2]
cbind(z1, z2)
z1 <- sqrt(lambda[1]) * v[, 1]
z2 <- sqrt(lambda[2]) * v[, 2]
cbind(z1, z2)
lambda <- eigen(Xstar2)$values  # these are not the same values as for 
x      = x[,2:8] 
n      = nrow(food[, 2:8])
p      = ncol(food[, 2:8])
one    = matrix(1,n,n)
x      = food[,2:8] 
n      = nrow(food[, 2:8])
p      = ncol(food[, 2:8])
one    = matrix(1,n,n)
h      = diag(1,n,n)-one/n             #centering the matrix
a      = x-matrix(apply(x,2,mean),n,p,byrow=T) #substracts mean
d      = diag(1/sqrt(colSums(a^2)/n))
xs     = h%*%as.matrix(x)%*%d         #standardized data
xs1    = xs/sqrt(n)
xs2    = t(xs1)%*%xs1
eig    = eigen(xs2) #spectral decomposition
lambda = eig$values
lambda2 = eig$values
lambda <- eigen(R)$values  # book values
lambda
lambda2
h
Hew
Hnew
a
d
D
D <- apply(Hscaled, 2, sd)
D <- diag(D)
D
D <- apply(Hnew, 2, sd)
D <- diag(D)
D
d
D <- apply(Hnew, 2, function(x) sd(x) / 12)
D <- diag(D)
D
d
D <- apply(Hnew, 2, function(x) sqrt(var(x) / 12))
D <- diag(D)
D
d
D <- apply(Hnew, 2, function(x) 1/sd(x))
D <- diag(D)
D
d
Xstar2 <- as.matrix(Hnew) %*% D)
Xstar2 <- as.matrix(Hnew) %*% D
Xstar2 <- Xstar2 / sqrt(12)
Xstar2
t(Xstar2) %*% Xstar2
Xstar2
xs
xs1
Xstar2
a
Hnew
sqrt(colSums(a^2)/n)
apply(food[, 2:8], 2, sd)
apply(Hnew, 2, sd)
sqrt(colSums(Hnew^2)/n)
1/sqrt(colSums(Hnew^2)/n)
1/apply(Hnew, 2, sd)
Xstar2 <- as.matrix(Hscaled)
Xstar2 <- Xstar2 / sqrt(12)
xs1
Xstar2
t(Xstar2) %*% Xstar2
Xstar2 <- as.matrix(Hnew) %*% D
Xstar2 / sqrt(12)
Hnew <- food[, 2:8]
Hnew <- Hnew - matrix(apply(Hnew,2,mean), nrow(Hnew), ncol(Hnew), byrow=T)
apply(Hnew, 2, sd)
apply(food[, 2:8], 2, sd)
colSums(Hnew^2)/12
sqrt(colSums(Hnew^2)/12)
apply(Hnew, 2, function(x) sqrt(var(x) / 12)
)
apply(Hnew, 2, function(x) sd(x) /sqrt(12))
apply(Hnew, 2, function(x) sqrt(var(x)))
apply(Hnew, 2, var(x))
apply(Hnew, 2, var)
colsums(Hnew^2)
colSums(Hnew^2)
colSums(Hnew^2)/12
D <- apply(Hnew, 2, function(x) 1/(sd(x) * 11/12)# Hardle uses 1/n instead of 1/(n-1)
D <- diag(D)
D <- apply(Hnew, 2, function(x) 1/(sd(x) * 11/12))# Hardle uses 1/n instead of 1/(n-1)
D <- diag(D)
Xstar2 <- as.matrix(Hnew) %*% D
Xstar2 <- Xstar2 / sqrt(12)
lambda <- eigen(t(Xstar2) %*% Xstar2)$values  # these are not the same values as for 
lambda
lambda2
d
D
sqrt(colSums(a^2)/n)
apply(Hnew, 2, function(x) sd(x) * 11/12)
apply(Hnew, 2, function(x) sd(x) * 12/11)
apply(Hnew, 2, function(x) sqrt(var(x) * 11/12))
apply(Hnew, 2, function(x) sd(x) * sqrt(11/12))
D <- apply(Hnew, 2, function(x) 1/(sd(x) * sqrt(11/12)))# Hardle uses 1/n instead of 1/(n-1)
D <- diag(D)
D
d
Xstar2 <- as.matrix(Hnew) %*% D
Xstar2 <- Xstar2 / sqrt(12)
lambda <- eigen(t(Xstar2) %*% Xstar2)$values  # these are not the same values as for 
lambda
u <- eigen(t(Xstar2) %*% Xstar2)$vectors
tau2 <- sum(lambda[1:2]) / sum(lambda)# 88% of the inertia
w1 <- sqrt(lambda[1]) * u[, 1]
w2 <- sqrt(lambda[2]) * -u[, 2]
plot(w1, w2, xlim = c(-1.05, 0.6), ylim = c(-1, 0.4), col = "white",
  main = "Representation of variables in 2-dimensional space")
text(w1, w2, labels = colnames(food[, 2:8]))
abline(h = 0); abline(v = 0)
v <- eigen(Xstar2)$vectors
v <- eigen(t(Xstar2) %*% Xstar2)$vectors
v <- eigen(t(Xstar2) %*% Xstar2)$vectors
W <- v * matrix(sqrt(lambda), nrow = nrow(v), byrow = TRUE))
W <- v * matrix(sqrt(lambda), nrow = nrow(v), byrow = TRUE)
matrix(sqrt(lambda), nrow = nrow(v), byrow = TRUE)
W <- v * matrix(sqrt(lambda), nrow = nrow(v), ncol = ncol(v), byrow = TRUE)
W
w
w      = gamma*(matrix(sqrt(lambda),nrow=nrow(gamma),ncol=ncol(gamma),byrow=T)) #coordinates of food
lambda2 = eig$values
gamma  = eig$vectors
w      = gamma*(matrix(sqrt(lambda2),nrow=nrow(gamma),ncol=ncol(gamma),byrow=T)) #coordinates of food
gamma
v
lambda2
lambda
gamma*(matrix(sqrt(lambda2),nrow=nrow(gamma),ncol=ncol(gamma),byrow=T))
matrix(sqrt(lambda), nrow = nrow(v), byrow = TRUE)
matrix(sqrt(lambda), nrow = nrow(v), ncol = ncol(v), byrow = TRUE)
matrix(sqrt(lambda2),nrow=nrow(gamma),ncol=ncol(gamma),byrow=T)
W <- v * matrix(sqrt(lambda), nrow = nrow(v), ncol = ncol(v), byrow = TRUE)
W
W <- v * matrix(sqrt(lambda), nrow = nrow(v), ncol = ncol(v), byrow = TRUE)[, 1:2]
W <- (v * matrix(sqrt(lambda), nrow = nrow(v), ncol = ncol(v), byrow = TRUE))[, 1:2]
W
z1 <- Xstar2 %*% v
z2 <- sqrt(n/p) * z1
plot(z1, z2)
z1
z1 <- (Xstar2 %*% v) * sqrt(n/p)
z1 <- ((Xstar2 %*% v) * sqrt(n/p))[, 1:2]
plot(z1[, 1], z2[, 2])
text(z1[, 1], z2[, 2], labels = food$Group)
text(z1[, 1], z2[, 2], labels = food$Group, col = "blue", hjust = -1)
text(z1[, 1], z2[, 2], labels = food$Group, col = "blue", pos = -1)
text(z1[, 1], z2[, 2], labels = food$Group, col = "blue", pos = 2)
text(z1[, 1], z2[, 2], labels = food$children, col = "red", pos = 4)
plot(z1[, 1], z2[, 2])
abline(h = 0); abline(v = 0)
text(z1[, 1], z2[, 2], labels = food$Group, col = "blue", pos = 2)
text(z1[, 1], z2[, 2], labels = food$children, col = "red", pos = 4
)
t(Xstar2) %*% Xstar2
R
lambda <- eigen(t(Xstar2) %*% Xstar2)$values  # these are now the same values as for 
#                                                R above, once sd values are adjusted
u <- eigen(t(Xstar2) %*% Xstar2)$vectors
tau2 <- sum(lambda[1:2]) / sum(lambda)# 88% of the inertia
w1 <- sqrt(lambda[1]) * u[, 1]
w2 <- sqrt(lambda[2]) * -u[, 2]
plot(w1, w2, xlim = c(-1.05, 0.6), ylim = c(-1, 0.4), col = "white",
  main = "Representation of variables in 2-dimensional space")
text(w1, w2, labels = colnames(food[, 2:8]))
abline(h = 0); abline(v = 0)
cbind(w1, w2)
w2 <- sqrt(lambda[2]) * -u[, 2]    # the bread / wine factor
plot(z1[, 1], z2[, 2])
abline(h = 0); abline(v = 0)
text(z1[, 1], z2[, 2], labels = food$Group, col = "blue", pos = 2)
text(z1[, 1], z2[, 2], labels = food$children, col = "red", pos = 4)
plot(w1, w2, xlim = c(-1.7, 1.3), ylim = c(-1, 1.0), col = "white",
  main = "Representation of variables in 2-dimensional space")
text(w1, w2, labels = colnames(food[, 2:8]))
abline(h = 0); abline(v = 0)
points(z1[, 1], z2[, 2], pch = "+")
text(z1[, 1], z2[, 2], labels = food$Group, col = "blue", pos = 2)
text(z1[, 1], z2[, 2], labels = food$children, col = "red", pos = 4)
tau3 <- sum(lambda[1:3]) / sum(lambda)
tau2 <- sum(lambda[1:4]) / sum(lambda)
tau3; tau4
tau4 <- sum(lambda[1:4]) / sum(lambda)
tau3; tau4
getwd()
w1 <- sqrt(lambda[1]) * u[, 1]
w2 <- sqrt(labmda[2]) * u[, 2]
w2 <- sqrt(lambda[2]) * u[, 2]
plot(w1, w2, col = "white",
  main = "Representation of variables in 2-dimensional space")
text(w1, w2, labels = colnames(BankNotes)
abline(h = 0); abline(v = 0)
text(w1, w2, labels = colnames(BankNotes))
abline(h = 0); abline(v = 0)
cbind(w1, w2)
cbind(colnanmes(BankNotes), w1, w2)
cbind(colnames(BankNotes), w1, w2)
R <- cor(BankNotes[, 1:7])
lambda <- eigen(R)$values
u <- eigen(R)$vectors
w1 <- sqrt(lambda[1]) * u[, 1]
w2 <- sqrt(lambda[2]) * u[, 2]
plot(w1, w2, col = "white",
  main = "Representation of variables in 2-dimensional space")
text(w1, w2, labels = colnames(BankNotes)[1:7])
abline(h = 0); abline(v = 0)
cbind(colnames(BankNotes), w1, w2)
cbind(colnames(BankNotes)[1:7], w1, w2)
v <- eigen(cor(t(BankNotes[, 1:7]))
)
head(t(BankNotes[, 1:7]))
v <- eigen(cor(t(as.matrix(BankNotes[, 1:7]))))
str(BankNotes)
colnames(BankNotes)[1:7]
R <- cor(BankNotes[, 1:6])
lambda <- eigen(R)$values
u <- eigen(R)$vectors
w1 <- sqrt(lambda[1]) * u[, 1]
w2 <- sqrt(lambda[2]) * u[, 2]
plot(w1, w2, col = "white",
  main = "Representation of variables in 2-dimensional space")
text(w1, w2, labels = colnames(BankNotes)[1:6])
abline(h = 0); abline(v = 0)
cbind(colnames(BankNotes)[1:6], w1, w2)
require(alr3)
head(banknotes)
head(banknote)
v <- eigen(cor(t(as.matrix(BankNotes[, 1:6]))))
z <- (as.matrixBankNotes[, 1:7] %*% v)[, 1:2]
z <- (as.matrix(BankNotes[, 1:7] %*% v)[, 1:2]
z <- (as.matrix(BankNotes[, 1:7]) %*% v)[, 1:2]
z <- (as.matrix(BankNotes[, 1:6]) %*% v)[, 1:2]
v <- eigen(cor(t(as.matrix(BankNotes[, 1:6]))))$vectors
z <- (as.matrix(BankNotes[, 1:6]) %*% v)[, 1:2]
z <- (t(as.matrix(BankNotes[, 1:6])) %*% v)[, 1:2]
plot(z1[, 1], z2[, 2])
text(z1[, 1], z2[, 2], labels = BankNotes$Notes, col = "blue", pos = 2)
names(BankNotes)
dim(Z)
text(z1[, 1], z2[, 2], labels = BankNotes$notes, col = "blue", pos = 2)
dim(z)
dim(v)
z <- (t(as.matrix(BankNotes[, 1:6])) %*% v)
dim(z)
z <- t(t(as.matrix(BankNotes[, 1:6])) %*% v)
z
dim(Xstar2)
dim(BankNotes[, 1:6])
z <- as.matrix(BankNotes[, 1:6]) %*% u
dim(z)
z <- (as.matrix(BankNotes[, 1:6]) %*% u)[, 1:2]
plot(z1[, 1], z2[, 2])
text(z1[, 1], z2[, 2], labels = BankNotes$notes[1:100], col = "blue", pos = 2)
text(z1[, 1], z2[, 2], labels = BankNotes$notes[101:200], col = "red", pos = 2)
dim(Z)
dim(z)
W <- diag(sqrt(lambda[1:2]))
W
W <- diag(sqrt(lambda[1:2])) %*% u[, 1:2]
u[, 1:2]
W <- u[, 1:2] %*% diag(sqrt(lambda[1:2]))
w1
w2
W
cbind(BankNotes$notes, z)
plot(z[, 1], z[, 2])
text(z[, 1], z[, 2], labels = BankNotes$notes[1:100], col = "blue", pos = 2)
plot(z[, 1], z[, 2], type = "n")
points(z[1:100, 1], z[1:100, 2], col = "blue")
points(z[101:200, 1], z[101:200, 2], col = "red")
z <- (as.matrix(scale(BankNotes[, 1:6])) %*% u)[, 1:2]
plot(z[, 1], z[, 2], type = "n")
points(z[1:100, 1], z[1:100, 2], col = "blue")
points(z[101:200, 1], z[101:200, 2], col = "red")
abline(h = 0); abline(v = 0)
windows()
plot(w1, w2, col = "white",
  main = "Representation of variables in 2-dimensional space")
text(w1, w2, labels = colnames(BankNotes)[1:6])
abline(h = 0); abline(v = 0)
timeBudget <- read.csv("time.csv")
timeBudget <- read.csv("DataMaybe\\TimeBudget.csv")
dim(timeBudget)
q()
male <- read.csv("./Data/male_bird.csv")
names(male) <- c("Tail", "Wing")
female <- read.csv("./Data/female_bird.csv")
names(female) <- c("Tail", "Wing")
# use density function in package 'SciViews"
require(SciViews)
pairs(male, diag.panel = panel.density)
pairs(female, diag.panel = panel.density)
malePC <- princomp(male)$scores
femalePC <- princomp(female)$scores
pairs(malePC, diag.panel = panel.density)
pairs(femalePC, diag.panel = panel.density)
S.male <- cov(male)
S.female <- cov(female)
male.means <- colMeans(male)
male.center <- male - rep(male.means, rep.int(nrow(male), ncol(male)))
male.chi <- diag(as.matrix(male.center) %*% solve(S.male) %*% t(as.matrix(male.center)))
S1.inverse <- solve(S.male)
for(i in 1:nrow(male.center)) { 
    male.chi[i] <- as.matrix(male.center[i, ]) %*% S1.inverse %*% 
        t(as.matrix(male.center[i, ]))
}
x <- sort(qchisq(male.chi, df = 2))
y <- rchisq(45, df = 2)
qqplot(y, qchisq(male.chi, df = 2), pch = 18,
       main = expression("Q-Q plot for" ~~ {chi^2}[nu == 2]))
abline(0,1, col = "blue")
for(i in 1:50) { 
    y <- rchisq(45, df = 2)
    points(y, qchisq(male.chi, df = 2), col = "blue")
}
female.means <- colMeans(female)
female.center <- female - rep(female.means, rep.int(nrow(female), ncol(female)))
S2.inverse <- solve(S.female)
female.chi <- diag(as.matrix(female.center) %*% S2.inverse %*% t(as.matrix(female.center)))
x <- sort(qchisq(female.chi, df = 2))
y <- rchisq(length(x), df = 2)
qqplot(y, x, pch = 18, 
       main = expression("Q-Q plot for" ~~ {chi^2}[nu == 2]))
abline(0,1, col = "blue")
for(i in 1:50) { 
    y <- rchisq(length(x), df = 2)
    points(y, x, col = "pink")
}
q()
