predtraincls<- predict(z, admission[train,])$class
sum(predtraincls != admission$class[train])/length(predtraincls)
warnings()
train<- sample(1:85,42)
z<-lda(class ~., admission, subset = train)
predtraincls<- predict(z, admission[train,])$class
sum(predtraincls != admission$class[train])/length(predtraincls)
train <- crossVal[[1]]
banknote[train]
banknote[train.]
banknote[train,]
train.lda <- lda(Y ~ ., banknote, subset = train)
predtraincls<- predict(train.lda, banknote[-train,])
predtaincls
predtraincls
predtraincls<- predict(train.lda, banknote[-train,])$class
sum(predtraincls != banknote$Y[train])/length(predtraincls)
train <- crossVal[[2]]
train.lda <- lda(Y ~ ., banknote, subset = train)
#compute training misclassification rate
predtraincls<- predict(train.lda, banknote[-train,])$class
sum(predtraincls != banknote$Y[train])/length(predtraincls)
sum(predtraincls != admission$class[train])/length(predtraincls)
train<- sample(1:85,42)
z<-lda(class ~., admission, subset = train)
predtraincls<- predict(z, admission[train,])$class
sum(predtraincls != admission$class[train])/length(predtraincls)
predtestcls<- predict(z, admission[-train,])$class
truecls <- admission$class[-train]
sum(predtestcls != truecls)/length(predtestcls)
train <- crossVal[[1]]
train.lda <- lda(Y ~ ., banknote, subset = train)
#compute training misclassification rate
predtraincls<- predict(train.lda, banknote[train,])$class
sum(predtraincls != banknote$Y[train])/length(predtraincls)
predtestcls<- predict(z, admission[-train,])$class
truecls <- admission$class[-train]
sum(predtestcls != truecls)/length(predtestcls)
train <- crossVal[[2]]
train.lda <- lda(Y ~ ., banknote, subset = train)
#compute training misclassification rate
predtraincls<- predict(train.lda, banknote[train,])$class
sum(predtraincls != banknote$Y[train])/length(predtraincls)
#predictions for test data
predtestcls<- predict(z, admission[-train,])$class
#true labels
truecls <- admission$class[-train]
#compute testing misclassification rate
sum(predtestcls != truecls)/length(predtestcls)
train <- crossVal[[3]]
train.lda <- lda(Y ~ ., banknote, subset = train)
#compute training misclassification rate
predtraincls<- predict(train.lda, banknote[train,])$class
sum(predtraincls != banknote$Y[train])/length(predtraincls)
#predictions for test data
predtestcls<- predict(z, admission[-train,])$class
#true labels
truecls <- admission$class[-train]
#compute testing misclassification rate
sum(predtestcls != truecls)/length(predtestcls)
train <- crossVal[[4]]
train.lda <- lda(Y ~ ., banknote, subset = train)
#compute training misclassification rate
predtraincls<- predict(train.lda, banknote[train,])$class
sum(predtraincls != banknote$Y[train])/length(predtraincls)
#predictions for test data
predtestcls<- predict(z, admission[-train,])$class
#true labels
truecls <- admission$class[-train]
#compute testing misclassification rate
sum(predtestcls != truecls)/length(predtestcls)
train <- crossVal[[5]]
train.lda <- lda(Y ~ ., banknote, subset = train)
#compute training misclassification rate
predtraincls<- predict(train.lda, banknote[train,])$class
sum(predtraincls != banknote$Y[train])/length(predtraincls)
#predictions for test data
predtestcls<- predict(z, admission[-train,])$class
#true labels
truecls <- admission$class[-train]
#compute testing misclassification rate
sum(predtestcls != truecls)/length(predtestcls)
train <- crossVal[[6]]
train.lda <- lda(Y ~ ., banknote, subset = train)
#compute training misclassification rate
predtraincls<- predict(train.lda, banknote[train,])$class
sum(predtraincls != banknote$Y[train])/length(predtraincls)
#predictions for test data
predtestcls<- predict(z, admission[-train,])$class
#true labels
truecls <- admission$class[-train]
#compute testing misclassification rate
sum(predtestcls != truecls)/length(predtestcls)
train <- crossVal[[7]]
train.lda <- lda(Y ~ ., banknote, subset = train)
#compute training misclassification rate
predtraincls<- predict(train.lda, banknote[train,])$class
sum(predtraincls != banknote$Y[train])/length(predtraincls)
#predictions for test data
predtestcls<- predict(z, admission[-train,])$class
#true labels
truecls <- admission$class[-train]
#compute testing misclassification rate
sum(predtestcls != truecls)/length(predtestcls)
train <- crossVal[[8]]
train.lda <- lda(Y ~ ., banknote, subset = train)
#compute training misclassification rate
predtraincls<- predict(train.lda, banknote[train,])$class
sum(predtraincls != banknote$Y[train])/length(predtraincls)
#predictions for test data
predtestcls<- predict(z, admission[-train,])$class
#true labels
truecls <- admission$class[-train]
#compute testing misclassification rate
sum(predtestcls != truecls)/length(predtestcls)
train <- crossVal[[9]]
train.lda <- lda(Y ~ ., banknote, subset = train)
#compute training misclassification rate
predtraincls<- predict(train.lda, banknote[train,])$class
sum(predtraincls != banknote$Y[train])/length(predtraincls)
#predictions for test data
predtestcls<- predict(z, admission[-train,])$class
#true labels
truecls <- admission$class[-train]
#compute testing misclassification rate
sum(predtestcls != truecls)/length(predtestcls)
sum(predtestcls != truecls)/length(predtestcls)
train <- crossVal[[10]]
train.lda <- lda(Y ~ ., banknote, subset = train)
#compute training misclassification rate
predtraincls<- predict(train.lda, banknote[train,])$class
sum(predtraincls != banknote$Y[train])/length(predtraincls)
#predictions for test data
predtestcls<- predict(z, admission[-train,])$class
#true labels
truecls <- admission$class[-train]
#compute testing misclassification rate
sum(predtestcls != truecls)/length(predtestcls)
train <- crossVal[[1]]
train.lda <- lda(Y ~ ., banknote, subset = train)
#compute training misclassification rate
predtraincls<- predict(train.lda, banknote[train,])$class
sum(predtraincls != banknote$Y[train])/length(predtraincls)
#predictions for test data
predtestcls<- predict(train.lda, admission[-train,])$class
#true labels
truecls <- admission$class[-train]
#compute testing misclassification rate
sum(predtestcls != truecls)/length(predtestcls)
train <- crossVal[[1]]
train.lda <- lda(Y ~ ., banknote, subset = train)
#compute training misclassification rate
predtraincls<- predict(train.lda, banknote[train,])$class
sum(predtraincls != banknote$Y[train])/length(predtraincls)
#predictions for test data
predtestcls<- predict(train.lda, banknote[-train,])$class
#true labels
truecls <- banknote$Y[-train]
#compute testing misclassification rate
sum(predtestcls != truecls)/length(predtestcls)
train <- crossVal[[2]]
train.lda <- lda(Y ~ ., banknote, subset = train)
#compute training misclassification rate
predtraincls<- predict(train.lda, banknote[train,])$class
sum(predtraincls != banknote$Y[train])/length(predtraincls)
#predictions for test data
predtestcls<- predict(train.lda, banknote[-train,])$class
#true labels
truecls <- banknote$Y[-train]
#compute testing misclassification rate
sum(predtestcls != truecls)/length(predtestcls)
train <- crossVal[[3]]
train.lda <- lda(Y ~ ., banknote, subset = train)
#compute training misclassification rate
predtraincls<- predict(train.lda, banknote[train,])$class
sum(predtraincls != banknote$Y[train])/length(predtraincls)
#predictions for test data
predtestcls<- predict(train.lda, banknote[-train,])$class
#true labels
truecls <- banknote$Y[-train]
#compute testing misclassification rate
sum(predtestcls != truecls)/length(predtestcls)
train <- crossVal[[4]]
train.lda <- lda(Y ~ ., banknote, subset = train)
#compute training misclassification rate
predtraincls<- predict(train.lda, banknote[train,])$class
sum(predtraincls != banknote$Y[train])/length(predtraincls)
#predictions for test data
predtestcls<- predict(train.lda, banknote[-train,])$class
#true labels
truecls <- banknote$Y[-train]
#compute testing misclassification rate
sum(predtestcls != truecls)/length(predtestcls)
train <- crossVal[[5]]
train.lda <- lda(Y ~ ., banknote, subset = train)
#compute training misclassification rate
predtraincls<- predict(train.lda, banknote[train,])$class
sum(predtraincls != banknote$Y[train])/length(predtraincls)
#predictions for test data
predtestcls<- predict(train.lda, banknote[-train,])$class
#true labels
truecls <- banknote$Y[-train]
#compute testing misclassification rate
sum(predtestcls != truecls)/length(predtestcls)
train <- crossVal[[6]]
train.lda <- lda(Y ~ ., banknote, subset = train)
#compute training misclassification rate
predtraincls<- predict(train.lda, banknote[train,])$class
sum(predtraincls != banknote$Y[train])/length(predtraincls)
#predictions for test data
predtestcls<- predict(train.lda, banknote[-train,])$class
#true labels
truecls <- banknote$Y[-train]
#compute testing misclassification rate
sum(predtestcls != truecls)/length(predtestcls)
train <- crossVal[[7]]
train.lda <- lda(Y ~ ., banknote, subset = train)
#compute training misclassification rate
predtraincls<- predict(train.lda, banknote[train,])$class
sum(predtraincls != banknote$Y[train])/length(predtraincls)
#predictions for test data
predtestcls<- predict(train.lda, banknote[-train,])$class
#true labels
truecls <- banknote$Y[-train]
#compute testing misclassification rate
sum(predtestcls != truecls)/length(predtestcls)
train <- crossVal[[8]]
train.lda <- lda(Y ~ ., banknote, subset = train)
#compute training misclassification rate
predtraincls<- predict(train.lda, banknote[train,])$class
sum(predtraincls != banknote$Y[train])/length(predtraincls)
#predictions for test data
predtestcls<- predict(train.lda, banknote[-train,])$class
#true labels
truecls <- banknote$Y[-train]
#compute testing misclassification rate
sum(predtestcls != truecls)/length(predtestcls)
train <- crossVal[[9]]
train.lda <- lda(Y ~ ., banknote, subset = train)
#compute training misclassification rate
predtraincls<- predict(train.lda, banknote[train,])$class
sum(predtraincls != banknote$Y[train])/length(predtraincls)
#predictions for test data
predtestcls<- predict(train.lda, banknote[-train,])$class
#true labels
truecls <- banknote$Y[-train]
#compute testing misclassification rate
sum(predtestcls != truecls)/length(predtestcls)
train <- crossVal[[10]]
train.lda <- lda(Y ~ ., banknote, subset = train)
#compute training misclassification rate
predtraincls<- predict(train.lda, banknote[train,])$class
sum(predtraincls != banknote$Y[train])/length(predtraincls)
#predictions for test data
predtestcls<- predict(train.lda, banknote[-train,])$class
#true labels
truecls <- banknote$Y[-train]
#compute testing misclassification rate
sum(predtestcls != truecls)/length(predtestcls)
predtestcls
truecls
train <- crossVal[[1]]
train.qda <- qda(Y ~ ., banknote, subset = train)
predtraincls<- predict(train.qda, banknote[train,])$class
sum(predtraincls != banknote$Y[train])/length(predtraincls)
#predictions for test data
predtestcls<- predict(train.qda, banknote[-train,])$class
#true labels
truecls <- banknote$Y[-train]
#compute testing misclassification rate
sum(predtestcls != truecls)/length(predtestcls)
train <- crossVal[[2]]
train.qda <- qda(Y ~ ., banknote, subset = train)
predtraincls<- predict(train.qda, banknote[train,])$class
sum(predtraincls != banknote$Y[train])/length(predtraincls)
#predictions for test data
predtestcls<- predict(train.qda, banknote[-train,])$class
#true labels
truecls <- banknote$Y[-train]
#compute testing misclassification rate
sum(predtestcls != truecls)/length(predtestcls)
train <- crossVal[[3]]
train.qda <- qda(Y ~ ., banknote, subset = train)
predtraincls<- predict(train.qda, banknote[train,])$class
sum(predtraincls != banknote$Y[train])/length(predtraincls)
#predictions for test data
predtestcls<- predict(train.qda, banknote[-train,])$class
#true labels
truecls <- banknote$Y[-train]
#compute testing misclassification rate
sum(predtestcls != truecls)/length(predtestcls)
train <- crossVal[[4]]
train.qda <- qda(Y ~ ., banknote, subset = train)
predtraincls<- predict(train.qda, banknote[train,])$class
sum(predtraincls != banknote$Y[train])/length(predtraincls)
#predictions for test data
predtestcls<- predict(train.qda, banknote[-train,])$class
#true labels
truecls <- banknote$Y[-train]
#compute testing misclassification rate
sum(predtestcls != truecls)/length(predtestcls)
train <- crossVal[[5]]
train.qda <- qda(Y ~ ., banknote, subset = train)
predtraincls<- predict(train.qda, banknote[train,])$class
sum(predtraincls != banknote$Y[train])/length(predtraincls)
#predictions for test data
predtestcls<- predict(train.qda, banknote[-train,])$class
#true labels
truecls <- banknote$Y[-train]
#compute testing misclassification rate
sum(predtestcls != truecls)/length(predtestcls)
#QDA
train <- crossVal[[6]]
train.qda <- qda(Y ~ ., banknote, subset = train)
predtraincls<- predict(train.qda, banknote[train,])$class
sum(predtraincls != banknote$Y[train])/length(predtraincls)
#predictions for test data
predtestcls<- predict(train.qda, banknote[-train,])$class
#true labels
truecls <- banknote$Y[-train]
#compute testing misclassification rate
sum(predtestcls != truecls)/length(predtestcls)
train <- crossVal[[7]]
train.qda <- qda(Y ~ ., banknote, subset = train)
predtraincls<- predict(train.qda, banknote[train,])$class
sum(predtraincls != banknote$Y[train])/length(predtraincls)
#predictions for test data
predtestcls<- predict(train.qda, banknote[-train,])$class
#true labels
truecls <- banknote$Y[-train]
#compute testing misclassification rate
sum(predtestcls != truecls)/length(predtestcls)
#QDA
train <- crossVal[[8]]
train.qda <- qda(Y ~ ., banknote, subset = train)
predtraincls<- predict(train.qda, banknote[train,])$class
sum(predtraincls != banknote$Y[train])/length(predtraincls)
#predictions for test data
predtestcls<- predict(train.qda, banknote[-train,])$class
#true labels
truecls <- banknote$Y[-train]
#compute testing misclassification rate
sum(predtestcls != truecls)/length(predtestcls)
train <- crossVal[[9]]
train.qda <- qda(Y ~ ., banknote, subset = train)
predtraincls<- predict(train.qda, banknote[train,])$class
sum(predtraincls != banknote$Y[train])/length(predtraincls)
#predictions for test data
predtestcls<- predict(train.qda, banknote[-train,])$class
#true labels
truecls <- banknote$Y[-train]
#compute testing misclassification rate
sum(predtestcls != truecls)/length(predtestcls)
train <- crossVal[[10]]
train.qda <- qda(Y ~ ., banknote, subset = train)
predtraincls<- predict(train.qda, banknote[train,])$class
sum(predtraincls != banknote$Y[train])/length(predtraincls)
#predictions for test data
predtestcls<- predict(train.qda, banknote[-train,])$class
#true labels
truecls <- banknote$Y[-train]
#compute testing misclassification rate
sum(predtestcls != truecls)/length(predtestcls)
truecls
predtestcls
train <- crossVal[[1]]
head(train)
banknote[train,]
mu1 <- mean(banknote[train,][banknote$Y == 1, -7])
banknote[train,][banknote$Y == 1, -7]
mu1 <- mean(subset(banknote[train,-7], banknote$Y == 1)
)
mu1 <- mean(apply(subset(banknote[train,-7], banknote$Y == 1), 2, mean)
mu1 <- apply(subset(banknote[train,-7], banknote$Y == 1), 2, mean)
mu1
subset(banknote[train,-7], banknote$Y == 1)
banknote[train, -7]
mu1 <- apply(subset(banknote[train,], Y == 1), 2, mean)
mu1 <- apply(subset(banknote[train,], banknote[train,]$Y == 1), 2, mean)
mu1
mu1 <- apply(subset(banknote[train,], banknote[train,-7]$Y == 1), 2, mean)
mu1
mu1 <- apply(subset(banknote[train,], banknote[train,]$Y == 1), 2, mean)[-7]
mu1
mu0 <- apply(subset(banknote[train,], banknote[train,]$Y == 0), 2, 
    mean)[-7]
m0
mu0
mu1 - mu0
banknote[1,]
sum((banknote[1, -7] - mu1)^2)
sqrt(sum((banknote[1, -7] - mu1)^2))
dist0 <- sqrt(sum((banknote[1, -7] - mu0)^2))
dist0
ifelse(dist1 > dist0, 1, 0)
dist1 <- sqrt(sum((banknote[1, -7] - mu1)^2))
dist0 <- sqrt(sum((banknote[1, -7] - mu0)^2))
ifelse(dist1 > dist0, 1, 0)
ifelse(dist1 < dist0, 1, 0)
preds <- rep(NA, nrow(banknote[-train,])
)
length(preds)
PC <- eigen(cov(banknote[train, -7])$vectors[,1]
PC <- eigen(cov(banknote[train, -7]))$vectors[,1]
`eigen(cov(banknote[train, -7]))
)
)
eigen(cov(banknote[train, -7]))
eigen(cov(banknote[train, -7]))$vectors
PC <- eigen(cov(banknote[train, -7]))$vectors[,1]
PC
iris
unique(iris$species)
names(iris)
unique(iris$Species)
smallIris <- subset(iris, Species != setosa)
smallIris <- subset(iris, Species != "setosa")
eigen(cov(iris[,-5]))$vectors
pca(smallIris)
princomp(smallIris)
princomp(smallIris[-5])
summary(princomp(smallIris[-5]))
princomp(smallIris[-5])$loadings
loads <- princomp(smallIris[-5])$loadings
z1 <- smallIris[,-5] %*% loads[,1]
z1 <- t(loads[,1])%*%smallIris[,-5]
z1 <- t(as.matrix(loads[,1]))%*%as.matrix(smallIris[,-5])
z1 <- as.matrix(smallIris[,-5]) %*%  t(as.matrix(loads[,1]))
z1 <- as.matrix(smallIris[,-5]) %*% as.matrix(loads[,1])
z1 = princomp(smallIris[-5])$scores[,1]
z1 <- as.matrix(smallIris[,-5]) %*% as.matrix(loads[,1])
z1 == princomp(smallIris[-5])$scores[,1]
z <- princomp(smallIris[-5])$scores
head(z)
plot(z[,1], z[,2])
plot(banknote[, 1], banknote[, 2], col = banknote$Y)
names(banknote)
R11 <- matrix(c(1.0, 0.615, 0.615, 1), nrow = 2)
R12 <- matrix(c(-.111, -.266, -.195, -.085), nrow = 2, byrow = TRUE)
R21 <- t(R12)
R22 <- matrix(c(1, -.269, -.269, 1), nrow = 2)
R11
R12
R21
R22
C <- solve(R11)%^%(-1/2)
C
solve(R11)
C %*% C
C <- solve(R11)%^%(1/2)
C %*% C
C <- solve(R11)%^%(1/2)%*% R12 %*% solve(R22)%^%(1/2) %*% R21 %*% solve(R11)%^%(1/2)
solve(R22) %^%(1/2)
C <- (solve(R11)%^%(1/2))%*% R12 %*% (solve(R22)%^%(1/2)) %*% 
    R21 %*% (solve(R11)%^%(1/2))
C
D <- (solve(R22)%^%(1/2))%*% R21 %*% (solve(R11)%^%(1/2)) %*% 
    R12 %*% (solve(R22)%^%(1/2))
lambdac <- eigen(C)$values
lambdad <- eigen(D)$values
lambdac
lambdad
a <- (solve(R11)%^%(1/2)) * lambdac
a
b <- (solve(R22)%^%(1/2)) * lambdad
a <- (solve(R11)%^%(1/2)) * C
a
b <- (solve(R22)%^%(1/2)) * D
b
C
eigen(solve(R11) %*% R12 %*% solve(R22) %*% R21)
c
C
a
a <- (solve(R11)%^%(1/2)) * C
b <- (solve(R22)%^%(1/2)) * D
a
a <- (solve(R11)%^%(1/2)) * lambdac
a
C <- (solve(R11)%^%(1/2))%*% R12 %*% solve(R22) %*% 
    R21 %*% (solve(R11)%^%(1/2))
D <- (solve(R22)%^%(1/2))%*% R21 %*% solve(R11) %*% 
    R12 %*% (solve(R22)%^%(1/2))
a <- (solve(R11)%^%(1/2)) * C
a
eigen(solve(R11) %*% R12 %*% solve(R22) %*% R21)
eigen(solve(R22) %*% R21 %*% solve(R11) %*% R12)
lambdac
lambdad
C <- (solve(R11)%^%(1/2))%*% R12 %*% solve(R22) %*% 
    R21 %*% (solve(R11)%^%(1/2))
D <- (solve(R22)%^%(1/2))%*% R21 %*% solve(R11) %*% 
    R12 %*% (solve(R22)%^%(1/2))
a <- (solve(R11)%^%(1/2)) * C
b <- (solve(R22)%^%(1/2)) * D
a
b
eigen(solve(R11) %*% R12 %*% solve(R22) %*% R21)
eigen(solve(R22) %*% R21 %*% solve(R11) %*% R12)
u <- eigen(solve(R11) %*% R12 %*% solve(R22) %*% R21)
v <- eigen(solve(R22) %*% R21 %*% solve(R11) %*% R12)
-2 * log(u$values[1])
product(1 - u$values)
prod(1 - u$values)
(1 - u$values[1]) * (1 - u$values[2])
chi.star <- -(48 - 1 -1/2(2 + 2 + 1)) * log(prod(1 - u$values))
chi.star <- -(48 - 1 -1/2 *(2 + 2 + 1)) * log(prod(1 - u$values))
chi.star
qchisq(.05, 2*2)
qchisq(.95, 2*2)
qchisq(.95, 5*7)
q()
